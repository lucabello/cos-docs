{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to Canonical's (unofficial) Observability docs. This little wiki stems from the need to have some information at hand and not being able to find it anywhere; some things will be especially useful for eventual newcomers joining the Observability team at Canonical!</p>"},{"location":"#useful-links","title":"Useful Links","text":"<ul> <li>Open PRs on Observability repositories</li> <li>Observability Team Updates on Charmhub's Discourse</li> </ul>"},{"location":"development/","title":"Charm Development","text":""},{"location":"development/#environment","title":"Environment","text":"<p>This page is a collection of ways to simply, quickly and effectively bootstrap a development environment for charming.</p>"},{"location":"development/#multipass","title":"Multipass","text":"<p>Multipass allows bootstrapping VMs from YAML files holding their configuration (also called blueprints), through <code>multipass launch --cloud-init &lt;filename&gt;.yaml</code>. You can find useful blueprints and further instructions in the following resources:</p> <ul> <li>canonical/multipass-blueprints, for a minimal development environment;</li> <li>Abuelodelanada/charm-dev-utils, for complete ready-to-go blueprints.</li> </ul>"},{"location":"development/#lxd","title":"LXD","text":"<p>LXD allows creating containers or VMs from configuration profiles. You can write your own or customize the following one to achieve different things; this section will present an example setup.</p>"},{"location":"development/#minimal-configuration","title":"Minimal Configuration","text":"<p>Read this profile, customize it and save it to charm-dev.yaml.</p> charm-dev.yaml<pre><code>name: charm-dev\nconfig:\nboot.autostart: \"false\"\nlimits.cpu: \"4\" # CPUs to allocate\nlimits.memory: 16GiB # Memory to allocate\nsecurity.secureboot: \"false\"\n# Define the VM users in cloud-config\nuser.user-data: |\n#cloud-config\nusers:\n- name: ubuntu\nshell: /bin/bash\ngroups: lxd\nsudo: ALL=(ALL) NOPASSWD:ALL\ndescription: Light-weight profile for charm development\ndevices:\neth0:\nname: eth0\nnetwork: lxdbr0\ntype: nic\n# If you have a folder for repositories on your machine,\n# it can be useful to mount it in the VM\nrepo-folder:\npath: &lt;path/on/local/machine&gt;\nsource: /home/ubuntu/Repositories\ntype: disk\nroot:\npath: /\npool: default\nsize: 30GB # Disk size to allocate\ntype: disk\n</code></pre> <p>The first time you create a VM, you'll need to run some commands to create the starting configuration and initialize the necessary resources: <pre><code># Create the storage pool (feel free to change its size)\nlxc storage create charm-dev-pool btrfs size=100GiB\n# Create your chosen profile (in this example, charm-dev)\nlxc profile create charm-dev\nlxc profile edit charm-dev &lt; charm-dev.yaml\n</code></pre></p> <p>After the pool has been created, you'll be able to bootstrap a new VM by running: <pre><code># Launch the machine\nlxc launch ubuntu:22.10 --vm charm-dev # --config limits.cpu=4 --config limits.memory=16GiB\n# Set the disk size of the machine\nlxc config device override charm-dev root size=30GiB\n</code></pre></p> <p>You can now open a shell into the VM: <pre><code>lxc exec charm-dev -- su --login ubuntu\n</code></pre></p>"},{"location":"development/#complete-configuration","title":"Complete Configuration","text":"<p>There are several ways to extend the minimal configuration above to obtain a ready-to-go development environment. One way to do so is to run the following Bash script as <code>./charm-dev.sh -p lxd</code>; please read it and adapt it your needs first! charm-dev.sh<pre><code>#!/usr/bin/env bash\n# Parse arguments\navailable_profiles=\"lxd\"\nusage=\"Usage: $0 -p &lt;profile&gt;\nAvailable profiles: ${available_profiles}\"\nprofile=\"\"\nwhile getopts p: flag\ndo\ncase \"${flag}\" in\np) profile=${OPTARG};;\n?) echo \"${usage}\"; exit 1;;\nesac\ndone\n## Check if a profile has been specified\nif [[ -z \"${profile}\" ]]; then echo \"(using default profile)\" &amp;&amp; profile=\"lxd\"; fi\nif grep -wqv \"${profile}\" &lt;&lt;&lt; \"${available_profiles}\"; then\necho \"The profile doesn't exist!\"; echo \"${usage}\"; exit 3;\nfi\n# Configuration\n## Packages to install\n### apt\napt_packages=\"\"\"\n  btop\n  git\n  jq\n  neovim\n  python-is-python3\n  python3\n  ranger\n  sshuttle\n  tox\n  tree\n  vim\n  zsh\n\"\"\"\n### pip\npip_packages=\"\"\"\n  yq\n\"\"\"\n### snap\nsnap_commands=(\n\"snap install yq\"\n\"snap install microk8s --channel 1.25-strict/stable\"\n\"snap alias microk8s.kubectl kubectl\"\n\"snap install juju --channel=3.0/stable\"\n\"snap install charmcraft --classic\"\n\"snap install jhack\"\n\"snap connect jhack:dot-local-share-juju snapd\"\n)\n# Ask for confirmation\n## Summarize changes\necho \"---\nProfile: ${profile}\n---\"\necho \"The following packages will be installed:\"\ncase \"${profile}\" in\nlxd) printf \"+ apt +\\n%s---\\n\" \"${apt_packages}\"\nprintf \"+ pip +\\n%s---\\n\" \"${pip_packages}\"\nprintf \"+ snap commands +\\n---\\n\"\nprintf \"%s\\n\" \"${snap_commands[@]}\" &amp;&amp; echo \"---\";;\nesac\n## Confirmation question\nread -p \"Continue (y/n)? \" choice\ncase \"${choice}\" in y|Y ) true;;\n* ) echo \"Exiting!\"; exit 4;;\nesac\n# Preliminary operations\n## Set passwords\nread -p \"Set user and root passwords (y/n)? \" choice\ncase \"${choice}\" in\ny|Y )\necho \"Changing the password for user $USER\" &amp;&amp; sudo passwd $USER || exit 5\necho \"Changing the password for root\" &amp;&amp; sudo passwd root || exit 5;;\nesac\n# Install packages\ncase \"${profile}\" in\nlxd)\necho \"+ Installing apt packages +\"\nsudo apt update\n    sudo apt install ${apt_packages}\necho \"+ Installing pip packages +\"\npip install --user ${pip_packages}\necho \"+ Installing snap packages +\"\nfor snap_cmd in \"${snap_commands[@]}\"; do\neval \"sudo $snap_cmd\"\ndone\n;;\nesac\n# Common operations\n## Change shell to zsh\nread -p \"Change default shell to zsh (y/n)? \" choice\ncase \"${choice}\" in y|Y )\nchsh -s /usr/bin/zsh\n    sudo chsh -s /usr/bin/zsh\n    ;;\nesac\n## OhMyZsh install\nread -p \"Install OhMyZsh (y/n)? \" choice\ncase \"${choice}\" in y|Y ) # OhMyZsh main script\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" \"\" --unattended\n    # Plugins\ngit clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions\n    git clone https://github.com/zsh-users/zsh-completions ~/.oh-my-zsh/custom/plugins/zsh-completions\n    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting\n    sed -i 's/plugins=(git)/plugins=(git zsh-autosuggestions zsh-completions zsh-syntax-highlighting virtualenv colored-man-pages juju colorize)/g' ~ubuntu/.zshrc\n    # Themes\ngit clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/.oh-my-zsh/custom/themes/powerlevel10k\n    ubuntu sed -i 's/ZSH_THEME=\"robbyrussell\"/ZSH_THEME=\"powerlevel10k/powerlevel10k\"/g' ~ubuntu/.zshrc\n    ;;\nesac\n## Charmcraft init\nread -p \"Do you want to initialize Charmcraft (y/n)? \" choice\ncase \"${choice}\" in\ny|Y )\nlxd init --auto;;\nesac\n## MicroK8s init\nread -p \"Do you want to initialize MicroK8s (y/n)? \" choice\ncase \"${choice}\" in\ny|Y )\nmkdir -p $HOME/.kube\n    sudo usermod -a -G snap_microk8s $USER\nexec su -l $USER\nmicrok8s config &gt; $HOME/.kube/config\n    sudo chown -f -R $USER ~/.kube\n    microk8s status --wait-ready\n    microk8s enable dns hostpath-storage ingress\n    microk8s status --wait-ready\n    ;;\nesac\n## Juju controller bootstrap\nread -p \"Bootstrap juju *dev* controller (y/n)? \" choice\ncase \"${choice}\" in\ny|Y )\njuju bootstrap microk8s dev;;\nesac\n</code></pre></p>"},{"location":"development/#gcp-google-cloud-platform","title":"GCP (Google Cloud Platform)","text":"<p>Use the template and instructions provided at sed-i/tf-gcp.</p>"},{"location":"development/#tools","title":"Tools","text":"<p>There are tools to make your charming experience better:</p> <ul> <li>jhack from PietroPasotti, with a lot of Discourse topics to get you started</li> </ul>"},{"location":"operations/","title":"Operations","text":""},{"location":"operations/#github-ci","title":"GitHub CI","text":"<p>Our charm repositories make use of a shared CI defined in the canonical/observability repo. Let's have a look at how that is invoked and configured to analyze what the CI is doing and how to add it to a new charm. I'll use the files in the Prometheus' charm workflows as an example:</p> <ul> <li>codeql-analysis.yml runs a CodeQL analysis (GitHub engine mostly for security checks)</li> <li>issues.yaml automatically handles the creation of Jira tickets from GitHub issues</li> <li>promote.yaml is manual action to promote a charm to its next channel (i.e., from edge to candidate, from candidate to stable)</li> <li>pull-request.yaml starts a series of quality checks on PRs (i.e., linting, static checks, testing, and more)</li> <li>release-edge.yaml handles the automatic release of a charm to edge whenever a PR is merged to main (if it's passing the quality checks)</li> <li>release-libs.yaml automatically publishes the charm libraries that have been updated and version-bumped on PR merges to main</li> <li>update-libs.yaml periodically checks if some charm libraries are outdated, and if so opens a PR with the necessary updates to be manually reviewed and merged</li> </ul> <p>Note that introducing this CI for a new charm requires the addition of some secrets in your repository:</p> <ul> <li><code>CHARMHUB_TOKEN</code> for the <code>charmcraft</code> command operations</li> <li><code>OBSERVABILITY_NOCTUA_TOKEN</code> for the automatic PR creation on library updates</li> </ul>"},{"location":"operations/#manually-publish-a-charm","title":"Manually publish a Charm","text":"<p>Charm releases and promotions usually happen through the CI; however, sometimes it might be necessary to do it manually: <pre><code>charmcraft pack\n# Login to charmcraft\ncharmcraft login --export=~/charmcraft.auth\nexport CHARMCRAFT_AUTH=$(cat ~/charmcraft.auth)\n# Upload the charm and get the revision number\ncharmcraft upload &lt;packed_charm&gt; # The &lt;revision&gt; number will be printed\n</code></pre></p> <p>Check in the charm metadata to see what resources are needed by the charm, and then: <pre><code># Find out the latest revision of the resources to attach\ncharmcraft resource-revisions &lt;charm_name&gt; &lt;resource&gt;\n# Release the charm to some channel\ncharmcraft release &lt;charm_name&gt; \\\n--revision=&lt;charm_revision&gt; \\\n--channel=&lt;channel&gt; \\\n--resource=&lt;resource_name&gt;:&lt;resource_revision&gt;\n## example:\n## charmcraft release traefik-k8s \\\n##     --revision=94 \\\n##     --channel=edge \\\n##     --resource=traefik-image:88\n</code></pre></p>"},{"location":"status/","title":"Status","text":"<p>This page contains the current status of all the charms managed by the Observability team.</p>"},{"location":"status/#github-ci","title":"Github CI","text":"Charm Release Charm Release Libraries alertmanager-k8s-operator \u00a0\u00a0  avalanche-k8s-operator \u00a0\u00a0  (no libraries) catalogue-k8s-operator \u00a0\u00a0  cos-configuration-k8s-operator \u00a0\u00a0  (no libraries) grafana-agent-k8s-operator \u00a0\u00a0  grafana-k8s-operator \u00a0\u00a0  karma-k8s-operator \u00a0\u00a0  loki-k8s-operator \u00a0\u00a0  mimir-k8s-operator \u00a0\u00a0  prometheus-k8s-operator \u00a0\u00a0  prometheus-pushgateway-k8s-operator \u00a0\u00a0  (no libraries) prometheus-scrape-config-k8s-operator \u00a0\u00a0  (no libraries) prometheus-scrape-target-k8s-operator \u00a0\u00a0  (no libraries) traefik-k8s-operator \u00a0\u00a0  traefik-route-k8s-operator \u00a0\u00a0  Bundle Test Suite Matrix Tests cos-lite-bundle \u00a0\u00a0  Others Release cos-proxy-operator \u00a0\u00a0  cos-tool \u00a0\u00a0  observability-libs \u00a0\u00a0  promql-transform"},{"location":"status/#charmhub-releases","title":"Charmhub Releases","text":"<p>These tables are updated by a script running periodically every hour, based on <code>juju info</code>. Times are in UTC (GMT+0).</p> latest1.0 Charms latest/stable latest/candidate latest/beta latest/edge alertmanager-k8s 472023-01-31 00:30 472023-01-31 00:30 472023-01-31 00:30 512023-02-02 04:11 avalanche-k8s 182023-01-26 04:59 182023-01-26 04:59 182023-01-26 04:59 212023-02-01 23:38 catalogue-k8s 102023-01-31 00:32 102023-01-25 20:07 102023-01-25 20:06 112023-02-01 21:16 cos-configuration-k8s 152023-01-31 20:38 152023-01-25 20:13 152023-01-25 20:13 182023-02-01 20:52 grafana-agent-k8s 242023-01-31 00:44 242023-01-31 00:44 242023-01-31 00:44 242023-01-31 20:37 grafana-k8s 642023-01-31 00:28 642023-01-31 00:28 642023-01-31 00:28 672023-02-02 11:07 karma-k8s -- -- -- 112023-01-30 23:48 loki-k8s 602023-01-31 00:30 602023-01-25 20:11 602023-01-25 20:11 632023-02-01 22:09 observability-libs -- -- -- 22023-01-31 15:37 prometheus-k8s 1032023-01-31 00:29 1032023-01-31 00:29 1032023-01-31 00:29 1082023-02-03 16:20 prometheus-scrape-config-k8s 392023-01-31 00:33 392023-01-25 20:15 392023-01-25 20:15 392023-01-25 11:36 prometheus-scrape-target-k8s 242023-01-31 00:34 242023-01-31 00:34 242023-01-31 00:34 242023-01-30 22:43 traefik-k8s 1102023-01-31 00:31 1102023-01-25 20:14 1102023-01-25 20:14 1142023-02-01 21:35 traefik-route-k8s 42023-01-31 00:39 42023-01-31 00:39 42023-01-31 00:39 62023-02-01 20:38 Bundles latest/stable latest/candidate latest/beta latest/edge cos-lite 112022-10-21 16:19 102022-10-21 16:19 92022-10-21 16:18 82022-10-21 16:17 Others latest/stable latest/candidate latest/beta latest/edge cos-proxy 112023-01-21 04:23 112023-01-21 04:23 112023-01-21 04:23 132023-02-01 14:48 Charms 1.0/stable 1.0/candidate 1.0/beta 1.0/edge alertmanager-k8s 472023-01-31 00:31 472023-01-31 00:30 472023-01-31 00:30 472023-01-31 00:30 avalanche-k8s -- -- -- -- catalogue-k8s 102023-01-31 00:32 102023-01-25 20:07 102023-01-25 20:07 102023-01-25 20:08 cos-configuration-k8s 152023-01-31 20:38 152023-01-25 20:13 152023-01-25 20:13 152023-01-25 20:13 grafana-agent-k8s 242023-01-31 00:44 242023-01-31 00:44 242023-01-31 00:44 242023-01-31 00:44 grafana-k8s 642023-01-31 00:28 642023-01-31 00:28 642023-01-31 00:28 642023-01-31 00:28 karma-k8s -- -- -- -- loki-k8s 602023-01-31 00:30 602023-01-25 20:11 602023-01-25 20:11 602023-01-25 20:11 observability-libs -- -- -- -- prometheus-k8s 1032023-01-31 00:29 1032023-01-31 00:29 1032023-01-31 00:29 1032023-01-31 00:29 prometheus-scrape-config-k8s 392023-01-31 00:33 392023-01-25 20:15 392023-01-25 20:15 392023-01-25 20:15 prometheus-scrape-target-k8s 242023-01-31 00:34 242023-01-31 00:34 242023-01-31 00:34 242023-01-31 00:34 traefik-k8s 1102023-01-31 00:31 1102023-01-25 20:14 1102023-01-25 20:14 1102023-01-25 20:14 traefik-route-k8s -- -- -- -- Bundles 1.0/stable 1.0/candidate 1.0/beta 1.0/edge cos-lite 162022-10-21 16:29 142022-10-21 16:26 132022-10-21 16:24 122022-10-21 16:23 Others 1.0/stable 1.0/candidate 1.0/beta 1.0/edge cos-proxy 112023-01-21 04:23 112023-01-21 04:23 112023-01-21 04:23 112023-01-21 04:23"},{"location":"status/#manual-checks","title":"Manual checks","text":"<p>To track the Charmhub release status, here's a useful bash script: </p> charmhub-summary.sh<pre><code>#!/usr/bin/env bash\n# Produce a summary report of the Charmhub release status for all charms\ncharms=\"\"\"\n  alertmanager-k8s\n  avalanche-k8s\n  catalogue-k8s\n  cos-configuration-k8s\n  grafana-agent-k8s\n  grafana-k8s\n  karma-k8s\n  loki-k8s\n  observability-libs\n  prometheus-k8s\n  prometheus-scrape-config-k8s\n  prometheus-scrape-target-k8s\n  traefik-k8s\n  traefik-route-k8s\n\"\"\"\nbundles=\"\"\"\n  cos-lite\n\"\"\"\nothers=\"\"\"\n  cos-proxy\n\"\"\"\n# Make sure juju is installed\njuju --version &gt;/dev/null || (echo \"Juju needs to be installed! (snap install juju)\" &amp;&amp; exit 1)\n# Make sure yq is installed\nyq --version &gt;/dev/null || (echo \"yq needs to be installed! (snap install yq)\" &amp;&amp; exit 1)\necho \"# Charms\\n\"\nfor charm in ${charms}; do\necho \"## ${charm}\" &amp;&amp; juju info \"${charm}\" | yq .channels -r\ndone\necho \"\\n# Bundles\\n\"\nfor bundle in ${bundles}; do\necho \"## ${bundle}\" &amp;&amp; juju info \"${bundle}\" | yq .channels -r\ndone\necho \"\\n# Others\\n\"\nfor other in ${others}; do\necho \"## ${other}\" &amp;&amp; juju info \"${other}\" | yq .channels -r\ndone\n</code></pre>"}]}